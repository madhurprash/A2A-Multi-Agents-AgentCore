general:
  name: "ops-orchestrator-agent"      
  description: ""

# This contains the model information for various agents
# in our multi agentic system
agent_information:
  # Represents the system prompt templates for each agent
  prompt_templates:
    prompt_template_dir: prompt_template
    # This is the system prompt for the monitoring agent that will be used 
    # in agent creation and development
    ops_orchestrator_agent:
  ops_orchestrator_agent_model_info: 
    # Represents the model id that the agent will use within 
    # the strands agents SDK
    model_id: gpt-4o-2024-08-06
    # Represents the inference parameters that the foundation model
    # uses at runtime during inference
    inference_parameters:
      # This is not an exhaustive list, it can be changed or extended
      # based on the inference parameters that are supported
      temperature: 0.1
      max_tokens: 2048
    # MEMORY CONFIGURATION FOR THE MONITORING AGENT
    # If your memory is already created, please provide the credentials here
    use_existing_memory: false
    memory_credentials:
      # fetch this from your AWS console
      id: 
    memory_allocation:
      # An actor refers to an entity such as an end user or an agent that interacts with the
      # agent application. For example, in a coding use case, an actor is a developer asking
      # questions to the assistant. Using the actor id helps the system know which user the 
      # memory belongs to, keeping each user's data separate and organized
      actor_id: actor_agent_openAI_madhur2039
      # The session is usually a single conversation that is the interaction period between
      # the user and the AI agent
      # A namespace is used to logically group and organize the long term memories, these will
      # be created on the fly using the strategies that are used in the memory for the agent.
    # GATEWAY CONFIGURATION FOR THE MONITORING AGENT
    # Gateway configuration for the monitoring agent
    # Gateway configuration with Keycloak
    gateway_config:
      name: "OpsOrchestratorGatewayKeycloak"
      
      # Keycloak authentication configuration (replaces cognito)
      inbound_auth:
        keycloak:
          # Keycloak server URL
          url: "${KEYCLOAK_URL}"  # e.g., "http://localhost:8080/" or "https://keycloak.example.com/"
          
          # Admin credentials for realm/client management
          admin_user: "${KEYCLOAK_ADMIN_USER}"  # e.g., "admin"
          admin_pass: "${KEYCLOAK_ADMIN_PASS}"  # e.g., "admin"
          
          # Realm configuration
          realm_name: "ops-orchestrator-realm"
          create_realm: true  # Set to false if realm already exists
          
          # Client configuration
          client_id: "ops-orchestrator-gateway-client"
          
          # Scopes for the gateway
          scopes:
            - "gateway:read"
            - "gateway:write"
            - "ops:manage"
            - "incidents:create"
            - "chatops:access"
      
      # Gateway credentials configuration
      credentials:
        use_existing: false
        use_keycloak: true  # Enable Keycloak authentication
        create_new_access_token: false
        gateway_id: null
        mcp_url: null
        access_token: null
      
      # Gateway targets configuration
      existing_target: false
      target_name: null
      bucket_name: "ops-orchestrator-gateway-bucket"
      
      # Target configurations
      targets:
        - name: "jira-integration"
          type: "http"
          endpoint: "https://your-jira-instance.atlassian.net"
          authentication:
            type: "basic"
            credentials:
              username: "${JIRA_USERNAME}"
              password: "${JIRA_API_TOKEN}"
        
        - name: "pagerduty-integration"
          type: "http"
          endpoint: "https://api.pagerduty.com"
          authentication:
            type: "bearer"
            credentials:
              token: "${PAGERDUTY_API_TOKEN}"
        
        - name: "slack-integration"
          type: "http"
          endpoint: "https://slack.com/api"
          authentication:
            type: "bearer"
            credentials:
              token: "${SLACK_BOT_TOKEN}"
        
        - name: "github-integration"
          type: "http"
          endpoint: "https://api.github.com"
          authentication:
            type: "bearer"
            credentials:
              token: "${GITHUB_TOKEN}"
              
      # this is the name of the bucket where the target files (openapi or smithy) will
      # be uploaded from
      bucket_name: fmbench-deep-dive
      # this is the description of the agent gateway
      description: "AgentCore Gateway for the openAI operations agent"
      # protocol type is MCP
      protocol_type: "MCP"
      # These can be MCP servers that are local or available through streamable http or sse
      # We will be fetching tools from these MCP servers and then use that behind a tool gateway
      # This tool gateway will ultimately contain local tools and MCP server tools that will be available
      # as endpoints to call through the tool gateway primitive
      # These can be json files for now are supported, can be lambda functions as well
      # This represents the target type for the gateway
      existing_target: false
      target_name: OpsTarget
      target_type:
      # IAM Role Configuration
      # this is the IAM role that will be attached to this gateway
      iam_role:
        execution_role_arn: "arn:aws:iam::ACCOUNT_ID:role/GenesisGatewayExecutionRole"
      # Inbound Authentication Configuration
      # COGNITO SETUP but this can be okta, keycloak, etc.
      inbound_auth:
        type: 
        set_up_keycloack: yes
      # This is if the agent is already configured and needs to be invokeds
      agent_arn: 
      # set this to false if the agent arn is provided from above
      launch_agentcore_runtime: true
      # this is the runtime execution role for the agent that will be used 
      runtime_exec_role: arn:aws:iam::218208277580:role/service-role/Amazon-Bedrock-IAM-Role-20240102T112809
      # Credentials storage configuration
      credentials:
        storage_path:
        use_existing: false
        create_new_access_token: true  # Enable automatic token refresh on 401 errors