# Example configuration for ops orchestrator agent with Keycloak authentication
# This replaces Cognito authentication with Keycloak OpenID Connect

agent_information:
  ops_orchestrator_agent_model_info:
    # Model configuration
    model_id: "us.anthropic.claude-3-5-sonnet-20241022-v2:0"
    inference_parameters:
      temperature: 0.7
      max_tokens: 4000
    
    # Memory configuration
    use_existing_memory: false
    existing_memory_id: null
    memory_allocation:
      actor_id: "ops_orchestrator_actor"
    
    # Gateway configuration with Keycloak
    gateway_config:
      name: "OpsOrchestratorGatewayKeycloak"
      
      # Keycloak authentication configuration (replaces cognito)
      inbound_auth:
        keycloak:
          # Keycloak server URL
          url: "${KEYCLOAK_URL}"  # e.g., "http://localhost:8080/" or "https://keycloak.example.com/"
          
          # Admin credentials for realm/client management
          admin_user: "${KEYCLOAK_ADMIN_USER}"  # e.g., "admin"
          admin_pass: "${KEYCLOAK_ADMIN_PASS}"  # e.g., "admin"
          
          # Realm configuration
          realm_name: "ops-orchestrator-realm"
          create_realm: true  # Set to false if realm already exists
          
          # Client configuration
          client_id: "ops-orchestrator-gateway-client"
          
          # Scopes for the gateway
          scopes:
            - "gateway:read"
            - "gateway:write"
            - "ops:manage"
            - "incidents:create"
            - "chatops:access"
      
      # Gateway credentials configuration
      credentials:
        use_existing: false
        use_keycloak: true  # Enable Keycloak authentication
        create_new_access_token: false
        gateway_id: null
        mcp_url: null
        access_token: null
      
      # Gateway targets configuration
      existing_target: false
      target_name: null
      bucket_name: "ops-orchestrator-gateway-bucket"
      
      # Target configurations
      targets:
        - name: "jira-integration"
          type: "http"
          endpoint: "https://your-jira-instance.atlassian.net"
          authentication:
            type: "basic"
            credentials:
              username: "${JIRA_USERNAME}"
              password: "${JIRA_API_TOKEN}"
        
        - name: "pagerduty-integration"
          type: "http"
          endpoint: "https://api.pagerduty.com"
          authentication:
            type: "bearer"
            credentials:
              token: "${PAGERDUTY_API_TOKEN}"
        
        - name: "slack-integration"
          type: "http"
          endpoint: "https://slack.com/api"
          authentication:
            type: "bearer"
            credentials:
              token: "${SLACK_BOT_TOKEN}"
        
        - name: "github-integration"
          type: "http"
          endpoint: "https://api.github.com"
          authentication:
            type: "bearer"
            credentials:
              token: "${GITHUB_TOKEN}"

# Environment variables to set:
# KEYCLOAK_URL=http://localhost:8080/
# KEYCLOAK_ADMIN_USER=admin
# KEYCLOAK_ADMIN_PASS=admin
# JIRA_USERNAME=your-jira-email@example.com
# JIRA_API_TOKEN=your-jira-api-token
# PAGERDUTY_API_TOKEN=your-pagerduty-token
# SLACK_BOT_TOKEN=xoxb-your-slack-bot-token
# GITHUB_TOKEN=your-github-personal-access-token

# Usage Instructions:
# 1. Set up Keycloak server (locally or remote)
# 2. Set the required environment variables
# 3. Update the configuration values as needed
# 4. Run the ops_orchestrator_multi_agent.py script
# 5. The script will automatically:
#    - Create Keycloak realm and client
#    - Setup OAuth2 scopes
#    - Create AWS Gateway with Keycloak auth
#    - Generate and save access tokens
#    - Create gateway targets for integrations