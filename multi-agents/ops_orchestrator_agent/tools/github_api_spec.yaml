# GitHub API for Ops Orchestrator Agent (OpenAPI 3.0.0)
openapi: 3.0.0
info:
  title: GitHub API for Ops Orchestrator Agent
  version: 1.0.0
  description: REST endpoints for repository, issue, and content operations
servers:
  - url: https://api.github.com
    description: GitHub REST API v3
paths:
  /repos/{owner}/{repo}/issues:
    get:
      operationId: listIssues
      summary: List repository issues
      parameters:
        - name: owner
          in: path
          required: true
          schema:
            type: string
        - name: repo
          in: path
          required: true
          schema:
            type: string
        - name: state
          in: query
          schema:
            type: string
            enum: [open, closed, all]
            default: open
        - name: labels
          in: query
          schema:
            type: string
        - name: assignee
          in: query
          schema:
            type: string
        - name: per_page
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 30
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Issue'
    post:
      operationId: createIssue
      summary: Create an issue
      parameters:
        - name: owner
          in: path
          required: true
          schema:
            type: string
        - name: repo
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
              properties:
                title:
                  type: string
                body:
                  type: string
                assignees:
                  type: array
                  items:
                    type: string
                labels:
                  type: array
                  items:
                    type: string
                milestone:
                  type: integer
      responses:
        '201':
          description: Issue created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
  /repos/{owner}/{repo}/issues/{issue_number}:
    get:
      operationId: getIssue
      summary: Get an issue
      parameters:
        - name: owner
          in: path
          required: true
          schema:
            type: string
        - name: repo
          in: path
          required: true
          schema:
            type: string
        - name: issue_number
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
    patch:
      operationId: updateIssue
      summary: Update an issue
      parameters:
        - name: owner
          in: path
          required: true
          schema:
            type: string
        - name: repo
          in: path
          required: true
          schema:
            type: string
        - name: issue_number
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                body:
                  type: string
                state:
                  type: string
                  enum: [open, closed]
                labels:
                  type: array
                  items:
                    type: string
                assignees:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Issue updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
  /repos/{owner}/{repo}/labels:
    get:
      operationId: listLabels
      summary: List repository labels
      parameters:
        - name: owner
          in: path
          required: true
          schema:
            type: string
        - name: repo
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Label'
    post:
      operationId: createLabel
      summary: Create a label
      parameters:
        - name: owner
          in: path
          required: true
          schema:
            type: string
        - name: repo
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - color
              properties:
                name:
                  type: string
                color:
                  type: string
                  pattern: '^[0-9a-fA-F]{6}$'
                description:
                  type: string
      responses:
        '201':
          description: Label created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
  /repos/{owner}/{repo}/contents/{path}:
    get:
      operationId: getContent
      summary: Get repository content
      parameters:
        - name: owner
          in: path
          required: true
          schema:
            type: string
        - name: repo
          in: path
          required: true
          schema:
            type: string
        - name: path
          in: path
          required: true
          schema:
            type: string
        - name: ref
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Content'
    put:
      operationId: createOrUpdateFileContents
      summary: Create or update file contents
      parameters:
        - name: owner
          in: path
          required: true
          schema:
            type: string
        - name: repo
          in: path
          required: true
          schema:
            type: string
        - name: path
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - message
                - content
              properties:
                message:
                  type: string
                content:
                  type: string
                  format: byte
                sha:
                  type: string
                branch:
                  type: string
                committer:
                  $ref: '#/components/schemas/GitUser'
                author:
                  $ref: '#/components/schemas/GitUser'
      responses:
        '201':
          description: File created successfully
        '200':
          description: File updated successfully
components:
  schemas:
    Issue:
      type: object
      properties:
        id: { type: integer }
        number: { type: integer }
        title: { type: string }
        body: { type: string, nullable: true }
        state: { type: string, enum: [open, closed] }
        user:
          $ref: '#/components/schemas/User'
        assignees:
          type: array
          items: { $ref: '#/components/schemas/User' }
        labels:
          type: array
          items: { $ref: '#/components/schemas/Label' }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
        html_url: { type: string, format: uri }
    Label:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        color:
          type: string
        description:
          type: string
          nullable: true
        default:
          type: boolean
        url:
          type: string
          format: uri
    User:
      type: object
      properties:
        login:      { type: string }
        id:         { type: integer }
        avatar_url: { type: string, format: uri }
        html_url:   { type: string, format: uri }
        type:       { type: string }
    Content:
      type: object
      properties:
        name:         { type: string }
        path:         { type: string }
        sha:          { type: string }
        size:         { type: integer }
        url:          { type: string, format: uri }
        html_url:     { type: string, format: uri }
        git_url:      { type: string, format: uri }
        download_url: { type: string, format: uri, nullable: true }
        type:         { type: string, enum: [file, dir] }
        content:      { type: string }
        encoding:     { type: string }
    GitUser:
      type: object
      properties:
        name:  { type: string }
        email: { type: string, format: email }
        date:  { type: string, format: date-time }
