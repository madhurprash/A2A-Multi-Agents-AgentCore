openapi: 3.0.0
info:
  title: Jira API for Ops Orchestrator Agent
  description: Atlassian Jira REST API endpoints for issue creation, management, and ticket triaging
  version: 3.0.0
  contact:
    name: Atlassian Jira API
    url: https://developer.atlassian.com/cloud/jira/platform/rest/v3/
servers:
  - url: https://api.atlassian.com/ex/jira/{cloudid}/rest/api/3
    description: Jira Cloud API v3
    variables:
      cloudid:
        default: your-cloud-id
        description: Atlassian Cloud ID
security:
  - oauth2: []
  - bearer_token: []
  - basic_auth: []

paths:
  /issue:
    post:
      summary: Create issue
      description: Create a new Jira issue for incident reporting or task tracking
      operationId: createIssue
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - fields
              properties:
                fields:
                  type: object
                  required:
                    - project
                    - summary
                    - issuetype
                  properties:
                    project:
                      type: object
                      properties:
                        key:
                          type: string
                          description: Project key
                        id:
                          type: string
                          description: Project ID
                    summary:
                      type: string
                      description: Issue title/summary
                    description:
                      type: object
                      description: Issue description in Atlassian Document Format
                      properties:
                        type:
                          type: string
                          default: doc
                        version:
                          type: integer
                          default: 1
                        content:
                          type: array
                          items:
                            type: object
                    issuetype:
                      type: object
                      properties:
                        name:
                          type: string
                          description: Issue type name (Task, Bug, Story, etc.)
                        id:
                          type: string
                          description: Issue type ID
                    priority:
                      type: object
                      properties:
                        name:
                          type: string
                          enum: [Highest, High, Medium, Low, Lowest]
                        id:
                          type: string
                    assignee:
                      type: object
                      properties:
                        accountId:
                          type: string
                          description: Atlassian Account ID of assignee
                    labels:
                      type: array
                      items:
                        type: string
                      description: Issue labels
                    components:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: string
                          name:
                            type: string
                    customfield_10000:
                      type: string
                      description: Example custom field (Epic Link)
      responses:
        '201':
          description: Issue created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedIssue'
        '400':
          description: Bad request - validation errors
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions

  /issue/{issueIdOrKey}:
    get:
      summary: Get issue
      description: Get details of a specific Jira issue
      operationId: getIssue
      parameters:
        - name: issueIdOrKey
          in: path
          required: true
          schema:
            type: string
          description: Issue ID or key (e.g., PROJ-123)
        - name: fields
          in: query
          schema:
            type: string
          description: Comma-separated list of fields to return
        - name: expand
          in: query
          schema:
            type: string
          description: Comma-separated list of expanded fields
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
        '404':
          description: Issue not found

    put:
      summary: Edit issue
      description: Update an existing Jira issue
      operationId: editIssue
      parameters:
        - name: issueIdOrKey
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fields:
                  type: object
                  properties:
                    summary:
                      type: string
                    description:
                      type: object
                    priority:
                      type: object
                      properties:
                        name:
                          type: string
                    assignee:
                      type: object
                      properties:
                        accountId:
                          type: string
                    labels:
                      type: array
                      items:
                        type: string
                update:
                  type: object
                  description: Operations to perform on fields
      responses:
        '204':
          description: Issue updated successfully
        '400':
          description: Bad request
        '404':
          description: Issue not found

  /issue/{issueIdOrKey}/transitions:
    get:
      summary: Get transitions
      description: Get available transitions for an issue
      operationId: getTransitions
      parameters:
        - name: issueIdOrKey
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  transitions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Transition'

    post:
      summary: Transition issue
      description: Perform a transition on an issue (e.g., change status)
      operationId: doTransition
      parameters:
        - name: issueIdOrKey
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - transition
              properties:
                transition:
                  type: object
                  required:
                    - id
                  properties:
                    id:
                      type: string
                      description: Transition ID
                fields:
                  type: object
                  description: Fields to update during transition
      responses:
        '204':
          description: Transition performed successfully
        '400':
          description: Bad request

  /issue/{issueIdOrKey}/assignee:
    put:
      summary: Assign issue
      description: Assign an issue to a user
      operationId: assignIssue
      parameters:
        - name: issueIdOrKey
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accountId:
                  type: string
                  description: Atlassian Account ID of assignee
                name:
                  type: string
                  description: Username (deprecated, use accountId)
      responses:
        '204':
          description: Issue assigned successfully
        '404':
          description: Issue or user not found

  /issue/{issueIdOrKey}/comment:
    get:
      summary: Get comments
      description: Get comments for an issue
      operationId: getComments
      parameters:
        - name: issueIdOrKey
          in: path
          required: true
          schema:
            type: string
        - name: startAt
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: maxResults
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  comments:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'

    post:
      summary: Add comment
      description: Add a comment to an issue
      operationId: addComment
      parameters:
        - name: issueIdOrKey
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - body
              properties:
                body:
                  type: object
                  description: Comment body in Atlassian Document Format
                  properties:
                    type:
                      type: string
                      default: doc
                    version:
                      type: integer
                      default: 1
                    content:
                      type: array
                      items:
                        type: object
                visibility:
                  type: object
                  description: Comment visibility restrictions
                  properties:
                    type:
                      type: string
                      enum: [group, role]
                    value:
                      type: string
      responses:
        '201':
          description: Comment added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'

  /search:
    get:
      summary: Search for issues using JQL
      description: Search for issues using Jira Query Language (JQL)
      operationId: searchForIssuesUsingJql
      parameters:
        - name: jql
          in: query
          required: true
          schema:
            type: string
          description: JQL query
        - name: startAt
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: maxResults
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: fields
          in: query
          schema:
            type: array
            items:
              type: string
          description: List of fields to return
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResults'

    post:
      summary: Search for issues using JQL (POST)
      description: Search for issues using JQL with POST method for complex queries
      operationId: searchForIssuesUsingJqlPost
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - jql
              properties:
                jql:
                  type: string
                  description: JQL query
                startAt:
                  type: integer
                  minimum: 0
                  default: 0
                maxResults:
                  type: integer
                  minimum: 1
                  maximum: 100
                  default: 50
                fields:
                  type: array
                  items:
                    type: string
                expand:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResults'

  /project:
    get:
      summary: Get all projects
      description: Get all projects accessible to the user
      operationId: getAllProjects
      parameters:
        - name: expand
          in: query
          schema:
            type: string
          description: Comma-separated list of expanded fields
        - name: recent
          in: query
          schema:
            type: integer
          description: Number of recent projects to return
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'

  /project/{projectIdOrKey}:
    get:
      summary: Get project
      description: Get details of a specific project
      operationId: getProject
      parameters:
        - name: projectIdOrKey
          in: path
          required: true
          schema:
            type: string
          description: Project ID or key
        - name: expand
          in: query
          schema:
            type: string
          description: Comma-separated list of expanded fields
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          description: Project not found

components:
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://auth.atlassian.com/authorize
          tokenUrl: https://auth.atlassian.com/oauth/token
          scopes:
            read:jira-work: Read Jira project and issue data
            write:jira-work: Create and edit issues, post comments
            manage:jira-project: Create and edit project settings
            read:jira-user: View user information in Jira
    bearer_token:
      type: http
      scheme: bearer
      description: OAuth 2.0 Bearer Token
    basic_auth:
      type: http
      scheme: basic
      description: Basic authentication with email and API token

  schemas:
    Issue:
      type: object
      properties:
        id:
          type: string
        key:
          type: string
        self:
          type: string
          format: uri
        fields:
          type: object
          properties:
            summary:
              type: string
            description:
              type: object
            status:
              $ref: '#/components/schemas/Status'
            priority:
              $ref: '#/components/schemas/Priority'
            issuetype:
              $ref: '#/components/schemas/IssueType'
            project:
              $ref: '#/components/schemas/Project'
            assignee:
              $ref: '#/components/schemas/User'
            reporter:
              $ref: '#/components/schemas/User'
            created:
              type: string
              format: date-time
            updated:
              type: string
              format: date-time
            labels:
              type: array
              items:
                type: string
            components:
              type: array
              items:
                $ref: '#/components/schemas/Component'

    CreatedIssue:
      type: object
      properties:
        id:
          type: string
        key:
          type: string
        self:
          type: string
          format: uri

    Status:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        statusCategory:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
            colorName:
              type: string

    Priority:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        iconUrl:
          type: string
          format: uri

    IssueType:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        iconUrl:
          type: string
          format: uri
        subtask:
          type: boolean

    Project:
      type: object
      properties:
        id:
          type: string
        key:
          type: string
        name:
          type: string
        description:
          type: string
        lead:
          $ref: '#/components/schemas/User'
        projectTypeKey:
          type: string
        simplified:
          type: boolean
        style:
          type: string
        isPrivate:
          type: boolean
        components:
          type: array
          items:
            $ref: '#/components/schemas/Component'
        versions:
          type: array
          items:
            $ref: '#/components/schemas/Version'

    User:
      type: object
      properties:
        accountId:
          type: string
        accountType:
          type: string
        emailAddress:
          type: string
          format: email
        avatarUrls:
          type: object
        displayName:
          type: string
        active:
          type: boolean
        timeZone:
          type: string

    Component:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        lead:
          $ref: '#/components/schemas/User'
        assigneeType:
          type: string
        realAssigneeType:
          type: string
        isAssigneeTypeValid:
          type: boolean
        project:
          type: string
        projectId:
          type: integer

    Version:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        archived:
          type: boolean
        released:
          type: boolean
        startDate:
          type: string
          format: date
        releaseDate:
          type: string
          format: date
        overdue:
          type: boolean
        userStartDate:
          type: string
          format: date
        userReleaseDate:
          type: string
          format: date
        project:
          type: string
        projectId:
          type: integer

    Comment:
      type: object
      properties:
        id:
          type: string
        author:
          $ref: '#/components/schemas/User'
        body:
          type: object
        updateAuthor:
          $ref: '#/components/schemas/User'
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
        visibility:
          type: object
          properties:
            type:
              type: string
            value:
              type: string

    Transition:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        to:
          $ref: '#/components/schemas/Status'
        hasScreen:
          type: boolean
        isGlobal:
          type: boolean
        isInitial:
          type: boolean
        isConditional:
          type: boolean
        fields:
          type: object

    SearchResults:
      type: object
      properties:
        expand:
          type: string
        startAt:
          type: integer
        maxResults:
          type: integer
        total:
          type: integer
        issues:
          type: array
          items:
            $ref: '#/components/schemas/Issue'